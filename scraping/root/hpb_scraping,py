from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from logging import config, getLogger
from time import sleep
import csv
import os
import yaml
import sys

# ログを保存するディレクトリが無ければ作成する。
log_save_dir = "/root/log/"
if not os.path.exists(log_save_dir):
    os.makedirs(log_save_dir)

# ログ周りの設定
logger = getLogger(__name__)
config.dictConfig(yaml.safe_load(open("config.yml").read()))
 
# webdriverのオプション設定。
options = Options()
options.add_argument("--headless")
options.add_argument("--disable-dev-shm-usage")
options.add_argument('--disable-gpu')
options.add_argument('--no-sandbox')
driver = webdriver.Chrome("/opt/chrome/chromedriver", options=options)

# スクレイピングした情報を書き込むための新規ファイルを作成する関数。file_nameを最初に決める。(好きなファイル名で良いが拡張子は.csv)
def make_save_file(file_name):
    """保存するcsvファイルを新規作成

    Parameters
    ----------
    file_name : str
        保存したいファイル名を指定

    Returns
    -------
    str
        保存するファイルパス
    """
    # ファイルを保存するディレクトリが無ければ作成する。
    save_dir = "/root/data/" 
    if not os.path.exists(save_dir):
        os.makedirs(save_dir)
    
    # pathを作成する。
    save_file_path = save_dir + file_name

    # 新規ファイル作成、ヘッダのみ書き込み
    with open(save_file_path, "wt", encoding="UTF-8", errors="ignore") as f:
        writer = csv.writer(f, lineterminator="\n")
        csv_header = ["サロン名", "名前", "性別、年齢、属性", "総合", "雰囲気", "接客サービス", "技術・仕上がり", "メニュー・料金", "口コミ本文"]
        writer.writerow(csv_header)
    
    return save_file_path 

# HotPepperBeautyの好きなエリアのurlを指定する。(サンプルとしてarea_url="https://beauty.hotpepper.jp/svcSF/macFA/salon/sacX151/")
# (指定ルールは「エリアから探す」の一番下の階層を指定する。例：総合トップ>美容院・美容室・ヘアサロン検索トップ>中国トップ>広島の美容院・美容室・ヘアサロン>袋町・中町・三川町・並木通りの美容院・美容室・ヘアサロン)
# save_file_pathはmake_save_fileから返されたpathを指定する。
def get_all_kuchikomi(area_url, save_file_path):
    """指定したエリアの全てのサロンの全ての口コミを取得する。

    Parameters
    ----------
    area_url : str
        取得したいエリアのURLを指定する。
    save_file_path : str
        make_save_file関数で作成したファイルパスを指定する。
    """
    driver.get(area_url)
    sleep(2)
        
    page = 1
    while True:
        # サロン情報の大枠を取得する。(現在の「page」のすべてのサロンの情報【aタグ→サロン名とサロンurlを取得】)
        all_salon = driver.find_elements_by_css_selector(".slnName")
        all_salon_a =  [salon.find_element_by_tag_name("a") for salon in all_salon]
        all_salon_a_text = [salon_a.text for salon_a in all_salon_a]
        all_salon_a_url = [salon_a.get_attribute("href") for salon_a in all_salon_a]
        logger.info(f'サロン一覧[{page}]ページ目')
        
        for salon_num in range(len(all_salon_a)):
            driver.get(all_salon_a_url[salon_num])
            sleep(2)
            
            salon_name = all_salon_a_text[salon_num]
            salon_url = all_salon_a_url[salon_num]
            logger.info(f'No.{salon_num+1} サロン名: {salon_name} URL: {salon_url} の口コミを取得中')

            # 次のtry:except文で「口コミ欄がない」サロンにアクセスした際のエラーを回避
            try:
                salon_kuchikomi = driver.find_element_by_css_selector("li.kuchikomi")
                salon_kuchikomi_url = salon_kuchikomi.find_element_by_tag_name("a").get_attribute("href")
                driver.get(salon_kuchikomi_url)
                sleep(2)

                #口コミページから口コミへのアクセスを開始する。
                i = 1
                while True:
                        logger.debug(f"{i}ページの口コミを取得中")

                        # 以下の関数で1ページ分の口コミを取得する。(別の関数として定義)
                        get_1page_kuchikomi_info(salon_name, save_file_path)
                    
                        # 口コミの次のページへ遷移
                        try:    
                            next_button()
                            i += 1
                        except Exception:
                            logger.info(f'{salon_name}の口コミ取得完了')
                            break
            
            except Exception:
                logger.info(f'No.{salon_num+1} サロン名: {salon_name} URL: {salon_url} には口コミは存在しなかった。')
                continue
            
        # サロン一覧へ戻る。(1ページ目のみ「back_url」が使えないためif-else処理。)
        if page == 1:
            driver.get(area_url)
            sleep(2)
        else:
            back_url = f"{area_url}PN{page}.html?searchGender=ALL"
            driver.get(back_url)
            sleep(2)

        # サロン一覧の次のページに進む。              
        try:
            # 次のページに進む。(別の関数として定義)
            next_button()
            page += 1
        # 一番最後のページの次のページはないのでエラーになる。その場合処理を終了(正常終了)
        except Exception:
            logger.info('すべての口コミを取得(正常終了)')
            sys.exit(0)
    
# 口コミを1ページ分取得し、csvファイルに保存する関数。
def get_1page_kuchikomi_info(salon_name, save_file_path):
    """1ページ分を口コミを全て取得しファイルに1行ずつ書き込んでいく。(get_all_kuchikomi関数内で使用する関数)

    Parameters
    ----------
    salon_name : str
        サロン名を指定する。(get_all_kuchikomi関数内で取得するので特に意識しなくて良い。)
    save_file_path : str
        ファイルパスを指定する。(get_all_kuchikomi関数の引数として指定するので特に意識しなくて良い。)
    """
    
    # 口コミの枠を取得。
    kuchikomis = driver.find_elements_by_css_selector("li.reportCassette.mT30")
    
    for kuchikomi in kuchikomis:
        # (自分用のメモ)子要素の検索「.//タグ名」、「//タグ名」だと（「．」がないと）ルートから辿って一番最初のタグ名ににアクセス。
        # (自分用のメモ)cssセレクタ「nth-child」はサポートされていないので「nth-of-type」に書き換える。

        csv_row = []
        overall_review = kuchikomi.find_element_by_css_selector("span.mL5.mR10.fgPink").text
        name = kuchikomi.find_element_by_css_selector("span.b").text
        gender_age = kuchikomi.find_element_by_css_selector("span.mL5.fs10.fgGray").text
        atmosphere = kuchikomi.find_element_by_css_selector("ul > li:nth-of-type(2) > span.mL10.fgPink.b").text
        attitude = kuchikomi.find_element_by_css_selector("ul > li:nth-of-type(3) > span.mL10.fgPink.b").text
        quality = kuchikomi.find_element_by_css_selector("ul > li:nth-of-type(4) > span.mL10.fgPink.b").text
        price_and_menu = kuchikomi.find_element_by_css_selector("ul > li:nth-of-type(5) > span.mL10.fgPink.b").text
        detail = kuchikomi.find_element_by_css_selector("p.mT10.wwbw").text
        
        csv_row.extend([salon_name, name, gender_age, overall_review, atmosphere, attitude, quality, price_and_menu, detail])
        with open(save_file_path, "at", encoding='UTF-8', errors="ignore") as f:
            writer = csv.writer(f, lineterminator="\n")
            writer.writerow(csv_row)

#「次へ」ボタンを押す関数。(次のページに移る)
def next_button():
    """次のページに遷移する。(get_all_kuchikomi関数内で使用する関数)
    """
    next_button = driver.find_element_by_xpath("//li[@class='pa top0 right0 afterPage']")
    next_button_url = next_button.find_element_by_tag_name("a").get_attribute("href")
    driver.get(next_button_url)
    sleep(2)
        
def main():
    # 広島の中心エリアなのでファイル名は「hirosima_central.csv」としておく。
    save_file_path = make_save_file(file_name = 'hirosima_central.csv')
    get_all_kuchikomi(area_url='https://beauty.hotpepper.jp/svcSF/macFA/salon/sacX151/', save_file_path=save_file_path)
    
if __name__ == '__main__':
    main()